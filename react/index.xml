<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reacts on 穆 道</title>
    <link>localhost/react/</link>
    <description>Recent content in Reacts on 穆 道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="localhost/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>localhost/react/create-react-app%E5%88%9D%E5%A7%8B%E5%8C%96ts%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/react/create-react-app%E5%88%9D%E5%A7%8B%E5%8C%96ts%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/react/react-error-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/react/react-error-collection/</guid>
      <description>最近在学习 React-Handling Events的时候出现了一个问题  描述： 在我 ctrl-c 了一段官网的代码后
class Toggle extends React.Component { constructor(props) { super(props); this.state = {isToggleOn: true}; // This binding is necessary to make `this` work in the callback  this.handleClick = this.handleClick.bind(this); } handleClick() { this.setState(state =&amp;gt; ({ isToggleOn: !state.isToggleOn })); } render() { return ( &amp;lt;button onClick={this.handleClick}&amp;gt; {this.state.isToggleOn ? &amp;#39;ON&amp;#39; : &amp;#39;OFF&amp;#39;} &amp;lt;/button&amp;gt; ); } } ReactDOM.render( &amp;lt;Toggle /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) ); visual-studio-code 提示了一个错误 Property &#39;isToggleOn&#39; does not exist on type &#39;Readonly&amp;lt;{}&amp;gt;&#39;.</description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/react/react%E4%B8%8B%E7%9A%84%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/react/react%E4%B8%8B%E7%9A%84%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>React 下的键盘事件 问题来源 ... &amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt; &amp;lt;list v in datalist&amp;gt; &amp;lt;input class=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;button class=&amp;#34;btn&amp;#34;&amp;gt;&amp;lt;/button&amp;gt; &amp;lt;/list&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ... 我希望在 div1 层处理键盘的监听 onKeyDwon(),onKeyPress(),onKeyUp(),来监听 ctrl isPressed。
因为用了 react + typescript 的 dev framework,
export class CustomdivElement extends React.Component { private _handleKeyDown() { console.log(&amp;#34;keydown&amp;#34;); } private _handleKeyPress() { console.log(&amp;#34;keypress&amp;#34;); } private _handleKeyUp() { console.log(&amp;#34;keyup&amp;#34;); } render() { return ( &amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt; ... &amp;lt;list&amp;gt; &amp;lt;input class=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;button class=&amp;#34;btn&amp;#34;&amp;gt;&amp;lt;/button&amp;gt; &amp;lt;/list&amp;gt; .</description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/react/react%E4%B8%8B%E7%9A%84%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/react/react%E4%B8%8B%E7%9A%84%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/</guid>
      <description>React 下的鼠标事件  如何阻止鼠标事件onMouseOver, onMouseOut对子组件的影响。  问题回顾:
有一个页面结构如下
&amp;lt;div id=&amp;#34;layer1&amp;#34;&amp;gt; ... &amp;lt;div id=&amp;#34;layer2&amp;#34;&amp;gt; ... &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;layer2&amp;#34;&amp;gt; ... &amp;lt;/div&amp;gt; ... &amp;lt;/div&amp;gt; 我要在鼠标进入 layer1 的时候，显示 mouseIn， 鼠标离开 layer1 的时候，显示 mouseOut；
在tsx文件下使用js原生事件如下
export class CustomDiv extends React.Component{ public _handleMouseIn(e: React.MouseEvent&amp;lt;HTMLDivElement&amp;gt;) { e.stopPropagation() // dosomething  } public _handleMouseOut(e: React.MouseEvent&amp;lt;HTMLDivElement&amp;gt;) { e.stopPropagation() // dosomething  } public render() { return( &amp;lt;div id=&amp;#34;layer1&amp;#34; onMouseOver = {this._handleMouseIn} onMouseOut = {this._handleMouseOut }&amp;gt; ... &amp;lt;div id=&amp;#34;layer2&amp;#34;&amp;gt; ... &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;layer2&amp;#34;&amp;gt; .</description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/react/window%E5%92%8Cdocument%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/react/window%E5%92%8Cdocument%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Window &amp;amp; Document Window(DOCS) window object 表示的是浏览器中打开的窗口。
如果文档包含框架（frame 或 iframe 标签），浏览器会为HTML文档创建一个 window 对象， 并为每个框架创建一个额外的 window 对象
Document(DOCS) 每个载入浏览器的 HTML 文档都会成为 Document 对象</description>
    </item>
    
  </channel>
</rss>