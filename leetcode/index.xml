<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCodes on 穆 道</title>
    <link>localhost/leetcode/</link>
    <description>Recent content in LeetCodes on 穆 道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="localhost/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>localhost/leetcode/115_minimalstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/leetcode/115_minimalstack/</guid>
      <description>最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。
push(x) —— 将元素 x 推入栈中。 pop() —— 删除栈顶的元素。 top() —— 获取栈顶元素。 getMin() —— 检索栈中的最小元素。
 Typescript Code
 </description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/leetcode/1370_inceasingdecreasingstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/leetcode/1370_inceasingdecreasingstring/</guid>
      <description>1370 上升下降字符串 给你一个字符串 s ，请你根据下面的算法重新构造字符串：
从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。 从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。 重复步骤 2 ，直到你没法从 s 中选择字符。 从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。 从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。 重复步骤 5 ，直到你没法从 s 中选择字符。 重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。 在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。
请你返回将 s 中字符重新排序后的 结果字符串 。
Train // 1. 字符升序排列 // 2. 去重剔除后，剩余的结果 // 3. 字符降序排列 // 4. 去重后,剩余的结果 </description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/leetcode/147_insertionsortlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/leetcode/147_insertionsortlist/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>localhost/leetcode/283_moezeros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/leetcode/283_moezeros/</guid>
      <description>Move Zeros 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
示例:
输入: [0,1,0,3,12] 输出: [1,3,12,0,0] 说明:
必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。</description>
    </item>
    
  </channel>
</rss>